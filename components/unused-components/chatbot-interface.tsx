'use client';

import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface ChatbotInterfaceProps {
  isRunning: boolean;
}

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const sampleResponses = [
  "That's a great question! Let me help you with that.",
  "I understand what you're asking. Here's what I think...",
  "Based on my knowledge, I can provide you with the following information...",
  "Interesting question! Let me break this down for you...",
  "I'd be happy to help you understand this concept better.",
];

export function ChatbotInterface({ isRunning }: ChatbotInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Hello! I\'m your AI assistant. How can I help you today?',
      isUser: false,
      timestamp: new Date(),
    }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: sampleResponses[Math.floor(Math.random() * sampleResponses.length)] + 
              ` You asked: "${inputText}". This is a simulated response from an AI chatbot. In a real implementation, this would be generated by a language model with access to knowledge bases and context.`,
        isUser: false,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const clearChat = () => {
    setMessages([{
      id: '1',
      text: 'Hello! I\'m your AI assistant. How can I help you today?',
      isUser: false,
      timestamp: new Date(),
    }]);
  };

  return (
    <div className="space-y-6">
      {/* Chat Interface */}
      <div className="glass rounded-lg overflow-hidden">
        {/* Chat Header */}
        <div className="p-4 border-b border-neural-700 bg-neural-800/50">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-r from-cyberpunk-neon to-cyberpunk-purple rounded-full flex items-center justify-center">
                <span className="text-neural-900 font-bold">AI</span>
              </div>
              <div>
                <h3 className="font-semibold text-neural-200">AI Assistant</h3>
                <p className="text-sm text-neural-400">Online â€¢ Ready to help</p>
              </div>
            </div>
            <button
              onClick={clearChat}
              className="px-3 py-1 bg-neural-700 hover:bg-neural-600 text-neural-300 text-sm rounded-lg transition-colors"
            >
              Clear Chat
            </button>
          </div>
        </div>

        {/* Messages */}
        <div className="h-96 overflow-y-auto p-4 space-y-4">
          <AnimatePresence>
            {messages.map((message) => (
              <motion.div
                key={message.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
              >
                <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.isUser
                    ? 'bg-cyberpunk-neon text-neural-900'
                    : 'bg-neural-800 text-neural-200'
                }`}>
                  <p className="text-sm">{message.text}</p>
                  <p className={`text-xs mt-1 ${
                    message.isUser ? 'text-neural-700' : 'text-neural-400'
                  }`}>
                    {message.timestamp.toLocaleTimeString()}
                  </p>
                </div>
              </motion.div>
            ))}
          </AnimatePresence>

          {/* Typing Indicator */}
          {isTyping && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="flex justify-start"
            >
              <div className="bg-neural-800 text-neural-200 px-4 py-2 rounded-lg">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-cyberpunk-neon rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-cyberpunk-neon rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-cyberpunk-neon rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </motion.div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="p-4 border-t border-neural-700">
          <div className="flex space-x-2">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your message..."
              className="flex-1 px-4 py-2 bg-neural-800 border border-neural-700 rounded-lg text-neural-200 placeholder-neural-500 focus:border-cyberpunk-neon focus:outline-none"
              disabled={isTyping}
            />
            <button
              onClick={sendMessage}
              disabled={!inputText.trim() || isTyping}
              className="px-6 py-2 bg-cyberpunk-neon text-neural-900 rounded-lg font-medium hover:bg-cyberpunk-neon/80 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Send
            </button>
          </div>
        </div>
      </div>

      {/* Chat Features */}
      <div className="grid md:grid-cols-3 gap-6">
        <div className="glass rounded-lg p-4">
          <h4 className="font-semibold text-cyberpunk-neon mb-2">Natural Language</h4>
          <p className="text-sm text-neural-400">
            Understands context and maintains conversation flow
          </p>
        </div>
        <div className="glass rounded-lg p-4">
          <h4 className="font-semibold text-cyberpunk-purple mb-2">Knowledge Base</h4>
          <p className="text-sm text-neural-400">
            Access to extensive information and real-time data
          </p>
        </div>
        <div className="glass rounded-lg p-4">
          <h4 className="font-semibold text-cyberpunk-green mb-2">Context Aware</h4>
          <p className="text-sm text-neural-400">
            Remembers conversation history and user preferences
          </p>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="glass rounded-lg p-6">
        <h3 className="text-lg font-bold text-cyberpunk-neon mb-4">
          Quick Actions
        </h3>
        <div className="grid md:grid-cols-2 gap-4">
          {[
            'Explain machine learning',
            'What is RAG?',
            'How do vector databases work?',
            'Tell me about AI ethics',
          ].map((action, index) => (
            <button
              key={index}
              onClick={() => setInputText(action)}
              className="p-3 bg-neural-800 hover:bg-neural-700 text-neural-300 text-left rounded-lg transition-colors"
            >
              {action}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}
