'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface PromptEngineeringDemoProps {
  isRunning: boolean;
}

const promptTemplates = [
  {
    name: 'Zero-shot',
    template: 'Answer the following question: {question}',
    description: 'Direct question without examples'
  },
  {
    name: 'Few-shot',
    template: 'Here are some examples:\nExample 1: {example1}\nExample 2: {example2}\nNow answer: {question}',
    description: 'Question with examples for context'
  },
  {
    name: 'Chain of Thought',
    template: 'Let\'s think step by step. {question}',
    description: 'Encourages step-by-step reasoning'
  },
  {
    name: 'Role-based',
    template: 'You are an expert {role}. {question}',
    description: 'Assigns specific expertise role'
  }
];

const sampleQuestions = [
  'What is the capital of France?',
  'Explain quantum computing in simple terms',
  'How do neural networks learn?',
  'What are the benefits of renewable energy?',
];

export function PromptEngineeringDemo({ isRunning }: PromptEngineeringDemoProps) {
  const [selectedTemplate, setSelectedTemplate] = useState(promptTemplates[0]);
  const [question, setQuestion] = useState('');
  const [generatedPrompt, setGeneratedPrompt] = useState('');
  const [response, setResponse] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePrompt = () => {
    if (!question.trim()) return;
    
    let prompt = selectedTemplate.template;
    
    // Replace placeholders
    prompt = prompt.replace('{question}', question);
    prompt = prompt.replace('{role}', 'AI researcher');
    prompt = prompt.replace('{example1}', 'Q: What is AI? A: AI is artificial intelligence.');
    prompt = prompt.replace('{example2}', 'Q: What is ML? A: ML is machine learning.');
    
    setGeneratedPrompt(prompt);
    
    // Simulate response generation
    setIsGenerating(true);
    setTimeout(() => {
      setResponse('This is a simulated response based on the prompt engineering technique. In a real system, this would be generated by an LLM using the crafted prompt.');
      setIsGenerating(false);
    }, 2000);
  };

  const selectSampleQuestion = (sampleQuestion: string) => {
    setQuestion(sampleQuestion);
  };

  return (
    <div className="space-y-8">
      {/* Template Selection */}
      <div className="glass rounded-lg p-6">
        <h3 className="text-xl font-bold text-cyberpunk-neon mb-4">
          Prompt Engineering Techniques
        </h3>
        <p className="text-neural-400 mb-6">
          Select a prompt template and see how different techniques affect AI responses.
        </p>
        
        <div className="grid md:grid-cols-2 gap-4">
          {promptTemplates.map((template) => (
            <motion.button
              key={template.name}
              onClick={() => setSelectedTemplate(template)}
              className={`p-4 rounded-lg text-left transition-all duration-300 ${
                selectedTemplate.name === template.name
                  ? 'bg-cyberpunk-neon text-neural-900 neural-glow'
                  : 'bg-neural-800 hover:bg-neural-700 text-neural-300'
              }`}
              whileHover={{ scale: 1.02, y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <div className="space-y-2">
                <h4 className="font-semibold">{template.name}</h4>
                <p className="text-sm opacity-80">{template.description}</p>
              </div>
            </motion.button>
          ))}
        </div>
      </div>

      {/* Question Input */}
      <div className="glass rounded-lg p-6">
        <h3 className="text-lg font-bold text-cyberpunk-neon mb-4">
          Enter Your Question
        </h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-neural-300 mb-2">
              Question:
            </label>
            <textarea
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder="Enter your question here..."
              className="w-full px-4 py-3 bg-neural-800 border border-neural-700 rounded-lg text-neural-200 placeholder-neural-500 focus:border-cyberpunk-neon focus:outline-none resize-none"
              rows={3}
            />
          </div>

          {/* Sample Questions */}
          <div>
            <p className="text-sm text-neural-400 mb-2">Or try a sample question:</p>
            <div className="flex flex-wrap gap-2">
              {sampleQuestions.map((sampleQuestion, index) => (
                <button
                  key={index}
                  onClick={() => selectSampleQuestion(sampleQuestion)}
                  className="px-3 py-1 bg-neural-800 text-neural-300 text-sm rounded-full hover:bg-neural-700 hover:text-cyberpunk-neon transition-colors"
                >
                  {sampleQuestion}
                </button>
              ))}
            </div>
          </div>

          <button
            onClick={generatePrompt}
            disabled={!question.trim() || isGenerating}
            className="px-6 py-2 bg-cyberpunk-neon text-neural-900 rounded-lg font-medium hover:bg-cyberpunk-neon/80 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isGenerating ? 'Generating...' : 'Generate Prompt'}
          </button>
        </div>
      </div>

      {/* Generated Prompt */}
      {generatedPrompt && (
        <motion.div
          className="glass rounded-lg p-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <h3 className="text-lg font-bold text-cyberpunk-neon mb-4">
            Generated Prompt ({selectedTemplate.name})
          </h3>
          <div className="bg-neural-900 p-4 rounded-lg border border-neural-700">
            <pre className="text-neural-300 whitespace-pre-wrap font-mono text-sm">
              {generatedPrompt}
            </pre>
          </div>
        </motion.div>
      )}

      {/* Response */}
      <AnimatePresence>
        {response && (
          <motion.div
            className="glass rounded-lg p-6"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.5 }}
          >
            <h3 className="text-lg font-bold text-cyberpunk-green mb-4">
              AI Response
            </h3>
            <div className="bg-neural-900 p-4 rounded-lg border border-cyberpunk-green/20">
              <p className="text-neural-300 leading-relaxed">{response}</p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Prompt Engineering Tips */}
      <div className="glass rounded-lg p-6">
        <h3 className="text-lg font-bold text-cyberpunk-purple mb-4">
          Prompt Engineering Tips
        </h3>
        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-semibold text-cyberpunk-neon mb-2">Best Practices:</h4>
            <ul className="space-y-2 text-sm text-neural-300">
              <li>• Be specific and clear in your instructions</li>
              <li>• Provide context and examples when needed</li>
              <li>• Use step-by-step reasoning for complex tasks</li>
              <li>• Test different prompt variations</li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-cyberpunk-orange mb-2">Common Techniques:</h4>
            <ul className="space-y-2 text-sm text-neural-300">
              <li>• Zero-shot: Direct questions</li>
              <li>• Few-shot: Examples for context</li>
              <li>• Chain of thought: Step-by-step reasoning</li>
              <li>• Role-based: Assign expertise</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
